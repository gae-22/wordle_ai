[project]
name = "wordle-ai"
version = "0.1.0"
description = "A sophisticated TUI-based WORDLE solver combining information theory, entropy calculations, and machine learning for optimal guess recommendations"
readme = "README.md"
license = "MIT"
authors = [{ name = "gae", email = "gaedev22@gmail.com" }]
maintainers = [{ name = "gae", email = "gaedev22@gmail.com" }]
keywords = [
    "wordle",
    "solver",
    "game",
    "puzzle",
    "terminal",
    "TUI",
    "python",
    "cli",
    "command-line",
    "word game",
    "entropy",
    "information theory",
    "machine learning",
    "ml",
    "artificial intelligence",
    "ai",
    "strategy",
    "rich",
    "terminal ui",
    "word puzzle",
    "5-letter words",
    "pattern recognition",
    "adaptive learning",
    "bayesian inference",
    "optimization",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Terminals",
    "Topic :: Utilities",
    "Typing :: Typed",
]

requires-python = ">=3.10"
dependencies = [
    "rich>=13.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "click>=8.0.0",
    "torch>=2.7.1",
    "matplotlib>=3.10.5",
    "seaborn>=0.13.2",
    "plotly>=6.2.0",
    "psutil>=7.0.0",
    "scipy>=1.15.3",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.80.0",
]
lint = ["ruff>=0.1.0", "mypy>=1.8.0", "black>=23.0.0", "isort>=5.12.0"]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]
performance = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.14",
]
all = ["wordle-ai[dev,test,lint,docs,performance]"]

[project.scripts]
wordle-ai = "src.main:main"
wordle = "src.main:main"
wordle-solver = "src.main:main"

[project.urls]
Homepage = "https://github.com/gae-22/wordle_ai"
Repository = "https://github.com/gae-22/wordle_ai"
Documentation = "https://github.com/gae-22/wordle_ai#readme"
Issues = "https://github.com/gae-22/wordle_ai/issues"
Changelog = "https://github.com/gae-22/wordle_ai/releases"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# =============================================================================
# Ruff Configuration
# =============================================================================
[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "C90", # mccabe complexity
    "RUF", # ruff-specific rules
    "PL",  # pylint
    "PIE", # flake8-pie
    "T20", # flake8-print
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "B008",    # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR2004", # magic value used in comparison
    "N806",    # non-lowercase-variable-in-function (common in scientific computing: X, Y, etc.)
    "PLW2901", # redefined-loop-name (common in PyTorch and scientific code)
    "C901",    # complex-structure (acceptable for specialized algorithms)
    "UP035",   # deprecated-import (for Python 3.8+ compatibility)
    "N818",    # error-suffix-on-exception-name (existing codebase compatibility)
    "PLR0915", # too-many-statements (acceptable for complex algorithms)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["T20", "PLR2004"]
"__init__.py" = ["F401"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 7

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# =============================================================================
# MyPy Configuration
# =============================================================================
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# プロジェクト固有の設定
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["numpy.*", "pandas.*", "sklearn.*", "rich.*", "click.*"]
ignore_missing_imports = true

# =============================================================================
# Coverage Configuration
# =============================================================================
[tool.coverage.run]
source = ["src"]
omit = ["*/__pycache__/*", "*/venv/*", "*/htmlcov/*", "*/tests/*", "*/test_*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

# =============================================================================
# Pytest Configuration
# =============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

# =============================================================================
# Black Configuration
# =============================================================================
[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# =============================================================================
# isort Configuration
# =============================================================================
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src"]
known_third_party = ["numpy", "pandas", "sklearn", "rich", "click"]

# =============================================================================
# Hatch Configuration (ビルドツール)
# =============================================================================
[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests", "/README.md", "/pyproject.toml", "/LICENSE"]
exclude = ["/.github", "/docs", "/.gitignore", "/.pre-commit-config.yaml"]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.envs.default]
dependencies = ["pytest", "pytest-cov", "mypy", "ruff"]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src --cov=tests {args}"
cov-report = ["test-cov", "coverage report"]
cov-html = ["test-cov", "coverage html"]
lint = "ruff check ."
format = "ruff format ."
type-check = "mypy src"
quality = ["lint", "format", "type-check"]

[tool.hatch.envs.performance]
dependencies = ["memory-profiler", "line-profiler", "py-spy"]

[tool.hatch.envs.performance.scripts]
profile-memory = "python -m memory_profiler {args}"
profile-line = "kernprof -l -v {args}"

[dependency-groups]
dev = ["mypy>=1.17.1", "pytest>=8.4.1", "ruff>=0.12.7"]
